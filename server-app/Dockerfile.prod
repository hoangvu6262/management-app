# syntax=docker/dockerfile:1.6

# ===== Runtime (nhẹ) =====
FROM mcr.microsoft.com/dotnet/aspnet:8.0-bookworm-slim AS base
WORKDIR /app
EXPOSE 8080

# Cần curl để healthcheck
RUN apt-get update && apt-get install -y --no-install-recommends curl \
  && rm -rf /var/lib/apt/lists/*

# Bind đúng địa chỉ/port trong container
ENV ASPNETCORE_URLS=http://0.0.0.0:8080
# Tắt chẩn đoán để giảm overhead (tuỳ nhu cầu)
ENV DOTNET_EnableDiagnostics=0

# Tạo user không đặc quyền
RUN useradd -m appuser
USER appuser

# ===== Build (có SDK) =====
FROM mcr.microsoft.com/dotnet/sdk:8.0-bookworm-slim AS build
WORKDIR /src

# Chỉ copy csproj trước để giữ cache restore
COPY ManagementApp.csproj ./

# Dùng BuildKit cache cho NuGet và packs (rất nhanh khi build lại)
RUN --mount=type=cache,target=/root/.nuget/packages \
  --mount=type=cache,target=/usr/share/dotnet/packs \
  dotnet restore "ManagementApp.csproj"

# Copy phần còn lại
COPY . .

# Build
RUN dotnet build "ManagementApp.csproj" -c Release -o /app/build

# ===== Publish =====
FROM build AS publish
# Tuỳ nhu cầu có thể thêm: /p:PublishTrimmed=true /p:PublishReadyToRun=true
RUN dotnet publish "ManagementApp.csproj" -c Release -o /app/publish /p:UseAppHost=false

# ===== Final =====
FROM base AS final
WORKDIR /app
# copy dưới quyền root rồi trả lại USER appuser
USER root
COPY --from=publish /app/publish .
USER appuser

# Healthcheck: đảm bảo app có endpoint /health trả 200
HEALTHCHECK --interval=30s --timeout=10s --start-period=20s --retries=3 \
  CMD curl -fsS http://localhost:8080/health || exit 1

ENTRYPOINT ["dotnet", "ManagementApp.dll"]