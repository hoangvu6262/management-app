name: SQLite Production CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  # Build and test for all pushes and PRs
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: client-app/package-lock.json

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      - name: Install client dependencies
        working-directory: client-app
        run: npm ci

      - name: Build client
        working-directory: client-app
        run: npm run build

      - name: Restore server dependencies
        working-directory: server-app
        run: dotnet restore

      - name: Build server
        working-directory: server-app
        run: dotnet build --no-restore

      - name: Test server
        working-directory: server-app
        run: dotnet test --no-build --verbosity normal

  # Deploy to production only on main branch with manual approval
  deploy-production:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: http://${{ secrets.EC2_HOST }}

    steps:
      - uses: actions/checkout@v3

      - name: 📋 Pre-deployment Info
        run: |
          echo "🚀 Deploying to SQLite Production Environment"
          echo "📅 Triggered by: ${{ github.actor }}"
          echo "🌳 Branch: ${{ github.ref_name }}"
          echo "📝 Commit: ${{ github.sha }}"

      - name: 🚀 Deploy to SQLite Production EC2
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "📋 Starting SQLite production deployment..."
            cd /home/ubuntu/management-app

            echo "🔄 Pulling latest code..."
            git pull origin main

            echo "💾 Creating pre-deployment backup..."
            cd aws-deployment
            bash enhanced-backup.sh || echo "⚠️ Backup failed, continuing deployment"

            echo "🗄️ Setting up SQLite production environment..."
            bash setup-sqlite.sh

            echo "🚀 Deploying with SQLite production configuration..."
            bash deploy.sh

            echo "⏳ Waiting for services to stabilize..."
            sleep 30

            echo "🏥 Running health checks..."
            if bash health-check-sqlite.sh; then
              echo "✅ Health check passed!"
            else
              echo "❌ Health check failed!"
              exit 1
            fi

            echo "📊 Running performance verification..."
            bash monitor-sqlite.sh

            echo "🎉 SQLite production deployment completed successfully!"
            echo "🌐 Application URL: http://$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)"

      - name: 📊 Post-deployment Summary
        if: success()
        run: |
          echo "🎉 SQLite Production Deployment Success!"
          echo "✅ Database: SQLite with WAL mode"
          echo "✅ Backup: Pre-deployment backup created"
          echo "✅ Health: All checks passed"
          echo "✅ Monitoring: Performance verified"

      - name: 🚨 Deployment Failed
        if: failure()
        run: |
          echo "❌ SQLite Production Deployment Failed!"
          echo "🔍 Check logs and consider rollback"
