name: 🚀 Deploy to EC2

on:
  # Manual trigger only - You have full control!
  workflow_dispatch:
    inputs:
      environment:
        description: "🌍 Environment to deploy to"
        required: true
        default: "production"
        type: choice
        options:
          - production
      confirm_deploy:
        description: '⚠️ Type "deploy" to confirm deployment'
        required: true
        type: string
      skip_build:
        description: "⚡ Skip Docker rebuild (faster, use existing images)"
        required: false
        default: false
        type: boolean

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm_deploy == 'deploy'

    steps:
      - uses: actions/checkout@v3

      - name: 📋 Pre-deployment Info
        run: |
          echo "🚀 Starting deployment to ${{ github.event.inputs.environment }}"
          echo "📅 Triggered by: ${{ github.actor }}"
          echo "🌳 Branch: ${{ github.ref_name }}"
          echo "📝 Commit: ${{ github.sha }}"
          echo "⚡ Skip rebuild: ${{ github.event.inputs.skip_build }}"

      - name: 🚀 Deploy to EC2
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "📋 Starting deployment process..."
            cd /home/ubuntu/management-app

            echo "🔄 Pulling latest code from GitHub..."
            git pull origin main

            echo "⚙️ Setting up production environment variables..."
            chmod +x setup-production-env.sh
            ./setup-production-env.sh

            if [ "${{ github.event.inputs.skip_build }}" = "true" ]; then
              echo "⚡ Skipping Docker rebuild, using existing images..."
              docker-compose down
              docker-compose up -d
            else
              echo "🔨 Rebuilding Docker containers..."
              docker-compose down
              docker-compose build --no-cache
              docker-compose up -d
            fi

            echo "🧹 Cleaning up unused Docker resources..."
            docker system prune -f

            echo "✅ Deployment completed successfully!"
            echo "🌐 Your app should be available at: http://$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)"

      - name: Deployment Success
        if: success()
        run: |
          echo "🚀 Deployment to ${{ github.event.inputs.environment }} completed successfully!"

      - name: Deployment Failed
        if: failure()
        run: |
          echo "❌ Deployment to ${{ github.event.inputs.environment }} failed!"
