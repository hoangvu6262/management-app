name: 🗄️ Enhanced SQLite Deploy

on:
  # Manual trigger only - Full control with SQLite integration!
  workflow_dispatch:
    inputs:
      environment:
        description: '🌍 Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      confirm_deploy:
        description: '⚠️ Type "deploy" to confirm deployment'
        required: true
        type: string
      skip_build:
        description: '⚡ Skip Docker rebuild (faster, use existing images)'
        required: false
        default: false
        type: boolean
      create_backup:
        description: '💾 Create backup before deployment'
        required: false
        default: true
        type: boolean
      run_maintenance:
        description: '🔧 Run database maintenance after deployment'
        required: false
        default: false
        type: boolean

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm_deploy == 'deploy'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: 📋 Pre-deployment Info
      run: |
        echo "🗄️ SQLite Production Deployment Starting"
        echo "========================================"
        echo "🌍 Environment: ${{ github.event.inputs.environment }}"
        echo "👤 Triggered by: ${{ github.actor }}"
        echo "🌳 Branch: ${{ github.ref_name }}"
        echo "📝 Commit: ${{ github.sha }}"
        echo "⚡ Skip rebuild: ${{ github.event.inputs.skip_build }}"
        echo "💾 Create backup: ${{ github.event.inputs.create_backup }}"
        echo "🔧 Run maintenance: ${{ github.event.inputs.run_maintenance }}"
    
    - name: 🚀 Deploy to SQLite Production EC2
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "📋 Starting enhanced SQLite deployment..."
          cd /home/ubuntu/ManagementApp
          
          echo "🔄 Pulling latest code from GitHub..."
          git pull origin main
          
          cd aws-deployment
          
          # Pre-deployment backup
          if [ "${{ github.event.inputs.create_backup }}" = "true" ]; then
            echo "💾 Creating pre-deployment backup..."
            if bash enhanced-backup.sh; then
              echo "✅ Backup created successfully"
            else
              echo "❌ Backup failed! Aborting deployment."
              exit 1
            fi
          else
            echo "⏭️ Skipping backup (as requested)"
          fi
          
          # SQLite setup
          echo "🗄️ Ensuring SQLite production configuration..."
          bash setup-sqlite.sh
          
          # Deployment
          if [ "${{ github.event.inputs.skip_build }}" = "true" ]; then
            echo "⚡ Fast deployment (skipping rebuild)..."
            docker-compose -f docker-compose.prod.yml down
            docker-compose -f docker-compose.prod.yml up -d
          else
            echo "🔨 Full deployment with rebuild..."
            bash deploy.sh
          fi
          
          echo "⏳ Waiting for services to start..."
          sleep 30
          
          # Health verification
          echo "🏥 Running comprehensive health checks..."
          if bash health-check-sqlite.sh; then
            echo "✅ Health check passed!"
          else
            echo "❌ Health check failed! Checking logs..."
            docker-compose -f docker-compose.prod.yml logs --tail=20
            exit 1
          fi
          
          # Performance check
          echo "📊 Running performance verification..."
          bash monitor-sqlite.sh
          
          # Optional maintenance
          if [ "${{ github.event.inputs.run_maintenance }}" = "true" ]; then
            echo "🔧 Running database maintenance..."
            bash maintain-sqlite.sh
          fi
          
          # Final status
          echo "🎉 Enhanced SQLite deployment completed!"
          echo "🌐 Application: http://$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)"
          echo "🗄️ Database: SQLite WAL mode"
          echo "📊 Status: All systems operational"
          
    - name: 📊 Deployment Success Summary
      if: success()
      run: |
        echo "🎉 Enhanced SQLite Deployment Success!"
        echo "======================================"
        echo "✅ Environment: ${{ github.event.inputs.environment }}"
        echo "✅ Database: SQLite production optimized"
        echo "✅ Backup: ${{ github.event.inputs.create_backup == 'true' && 'Created' || 'Skipped' }}"
        echo "✅ Build: ${{ github.event.inputs.skip_build == 'true' && 'Skipped (fast)' || 'Full rebuild' }}"
        echo "✅ Maintenance: ${{ github.event.inputs.run_maintenance == 'true' && 'Completed' || 'Skipped' }}"
        echo "✅ Health: All checks passed"
        echo "✅ Performance: Verified"
        echo ""
        echo "🌐 Your SQLite application is ready!"
        
    - name: ❌ Deployment Failed  
      if: failure()
      run: |
        echo "❌ Enhanced SQLite Deployment Failed!"
        echo "====================================="
        echo "🌍 Environment: ${{ github.event.inputs.environment }}"
        echo "📝 Check EC2 logs for details"
        echo "💾 Pre-deployment backup available (if created)"
        echo "🔄 Consider rollback if needed"
        echo ""
        echo "🛠️ Troubleshooting commands:"
        echo "  ssh into EC2 and run:"
        echo "  cd ManagementApp/aws-deployment"
        echo "  bash health-check-sqlite.sh"
        echo "  bash monitor-sqlite.sh"
        echo "  docker-compose -f docker-compose.prod.yml logs"

  post-deployment:
    needs: deploy
    runs-on: ubuntu-latest
    if: success()
    
    steps:
    - name: 📧 Notify Success (Optional)
      run: |
        echo "🎉 SQLite deployment notification sent!"
        echo "Environment: ${{ github.event.inputs.environment }}"
        echo "Deployed by: ${{ github.actor }}"
        echo "Time: $(date)"
