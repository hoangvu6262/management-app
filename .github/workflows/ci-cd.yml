name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Build and test for all pushes and PRs
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: client-app/package-lock.json
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
        
    - name: Install client dependencies
      working-directory: client-app
      run: npm ci
      
    - name: Build client
      working-directory: client-app  
      run: npm run build
      
    - name: Restore server dependencies
      working-directory: server-app
      run: dotnet restore
      
    - name: Build server
      working-directory: server-app
      run: dotnet build --no-restore
      
    - name: Test server
      working-directory: server-app
      run: dotnet test --no-build --verbosity normal

  # Deploy to production only on main branch with manual approval
  deploy-production:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: 
      name: production
      url: http://${{ secrets.EC2_HOST }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to Production EC2
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          cd /home/ubuntu/ManagementApp
          git pull origin main
          # Setup production environment variables
          chmod +x setup-production-env.sh
          ./setup-production-env.sh
          # Deploy with Docker
          docker-compose down
          docker-compose build --no-cache
          docker-compose up -d
          docker system prune -f
