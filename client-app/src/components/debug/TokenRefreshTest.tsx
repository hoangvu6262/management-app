'use client'\n\nimport { useState } from 'react'\nimport { authService } from '@/services/authService'\nimport { tokenManager } from '@/services/tokenManager'\nimport { isTokenExpired } from '@/services/api'\nimport { Button } from '@/components/ui/button'\n\nexport function TokenRefreshTest() {\n  const [status, setStatus] = useState('')\n  const [isLoading, setIsLoading] = useState(false)\n\n  const testTokenRefresh = async () => {\n    setIsLoading(true)\n    setStatus('Starting token refresh test...')\n    \n    try {\n      const accessToken = authService.getAccessToken()\n      const refreshToken = authService.getRefreshToken()\n      \n      console.log('=== TOKEN REFRESH TEST ===')\n      console.log('Has access token:', !!accessToken)\n      console.log('Has refresh token:', !!refreshToken)\n      \n      if (accessToken) {\n        console.log('Token is expired?', isTokenExpired(accessToken))\n        try {\n          const payload = JSON.parse(atob(accessToken.split('.')[1]))\n          const timeUntilExpiry = Math.floor((payload.exp * 1000 - Date.now()) / 1000)\n          console.log('Time until expiry:', timeUntilExpiry, 'seconds')\n          setStatus(`Current token expires in ${timeUntilExpiry}s`)\n        } catch (e) {\n          console.log('Invalid token format')\n        }\n      }\n      \n      if (!refreshToken) {\n        setStatus('❌ No refresh token available')\n        return\n      }\n      \n      console.log('Can refresh?', tokenManager.canRefresh())\n      setStatus('🔄 Attempting refresh...')\n      \n      const newToken = await tokenManager.refreshToken()\n      \n      console.log('✅ Refresh successful, new token:', !!newToken)\n      setStatus('✅ Refresh successful!')\n      \n    } catch (error: any) {\n      console.error('❌ Refresh failed:', error)\n      setStatus(`❌ Refresh failed: ${error.message}`)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const checkTokenStatus = () => {\n    const accessToken = authService.getAccessToken()\n    const refreshToken = authService.getRefreshToken()\n    \n    let info = `Access Token: ${accessToken ? '✅' : '❌'}\\n`\n    info += `Refresh Token: ${refreshToken ? '✅' : '❌'}\\n`\n    \n    if (accessToken) {\n      try {\n        const payload = JSON.parse(atob(accessToken.split('.')[1]))\n        const timeUntilExpiry = Math.floor((payload.exp * 1000 - Date.now()) / 1000)\n        const isExpiring = isTokenExpired(accessToken)\n        info += `Expires in: ${timeUntilExpiry}s\\n`\n        info += `Is expiring: ${isExpiring ? '🔴 YES' : '🟢 NO'}\\n`\n      } catch (e) {\n        info += 'Invalid token format\\n'\n      }\n    }\n    \n    info += `Can refresh: ${tokenManager.canRefresh() ? '✅' : '❌'}`\n    \n    alert(info)\n  }\n\n  return (\n    <div className=\"fixed bottom-4 left-4 bg-white dark:bg-gray-800 p-4 rounded-lg shadow-lg border z-50\">\n      <h3 className=\"font-bold mb-2\">Token Refresh Test</h3>\n      <div className=\"space-y-2\">\n        <Button \n          onClick={checkTokenStatus}\n          variant=\"outline\"\n          size=\"sm\"\n          className=\"w-full\"\n        >\n          Check Token Status\n        </Button>\n        <Button \n          onClick={testTokenRefresh}\n          disabled={isLoading}\n          size=\"sm\"\n          className=\"w-full\"\n        >\n          {isLoading ? '🔄 Refreshing...' : '🔄 Test Refresh'}\n        </Button>\n      </div>\n      {status && (\n        <div className=\"mt-2 text-xs text-gray-600 dark:text-gray-400\">\n          {status}\n        </div>\n      )}\n    </div>\n  )\n}\n